package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.model.Debt;

public class DebtRepository extends BaseRepository {
	private String insertSql = "INSERT INTO debt (userId, payment) VALUES (?,?)";
	private String selectByIdSql = "SELECT * FROM debt WHERE id=?";
	private String deleteSql = "DELETE FROM debt WHERE id=?";
	private String getAllSql = "SELECT * FROM debt";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement delete;
	PreparedStatement getAll;
	
	public DebtRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Debt get(int debtId){
		try{
			selectById.setInt(1, debtId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Debt result = new Debt();
				result.setId(rs.getInt("id"));
				result.setUserId(rs.getInt("userId"));
				result.setPayment(rs.getBigDecimal("payment"));
				
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
		
	}
	
	public void add(Debt debt) {
		try {
			insert.setInt(1, debt.getUserId());
			insert.setBigDecimal(3, debt.getPayment());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void delete(int debtId)
	{
		try {
			delete.setInt(1, debtId);
			delete.executeQuery();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE debt("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "userId bigint," + "payment int(10)"  
				+")";
	}

	@Override
	protected String tableName() {
		return "debt";
	}

	
	
}
