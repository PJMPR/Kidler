package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.model.Operation;

public class OperationRepository extends BaseRepository {
	private String insertSql = "INSERT INTO operation (operationHall, supply, patientCardId, doctor1Id, doctor2Id, doctor3Id) VALUES (?,?,?,?,?,?)";
	private String selectByIdSql = "SELECT * FROM operation WHERE id=?";
	private String deleteSql = "DELETE FROM operation WHERE id=?";
	private String getAllSql = "SELECT * FROM operation";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement delete;
	PreparedStatement getAll;
	
	public OperationRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Operation get(int operationId){
		try{
			selectById.setInt(1, operationId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Operation result = new Operation();
				result.setId(rs.getInt("id"));
				result.setOperationHall(rs.getInt("operationHall"));
				result.setSupply(rs.getString("supply"));
				result.setPatientCardId(rs.getInt("patientCardId"));
				result.setDoctor1Id(rs.getInt("doctor1Id"));
				result.setDoctor2Id(rs.getInt("doctor2Id"));
				result.setDoctor3Id(rs.getInt("doctor3Id"));
				
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
		
	}
	
	public void add(Operation operation) {
		try {
			insert.setInt(1, operation.getOperationHall());
			insert.setString(2, operation.getSupply());
			insert.setInt(3, operation.getPatientCardId());
			insert.setInt(4, operation.getDoctor1Id());
			insert.setInt(5, operation.getDoctor2Id());
			insert.setInt(6, operation.getDoctor3Id());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void delete(int operationId)
	{
		try {
			delete.setInt(1, operationId);
			delete.executeQuery();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE operation("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "operationHall int," + "payment int(10)"
				+ "patientCardId bigint," + "doctor1Id bigint,"
				+ "doctor2Id bigint," + "doctor3Id bigint,"
				+")";
	}

	@Override
	protected String tableName() {
		return "operation";
	}

	
	
}

