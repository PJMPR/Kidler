package dao;

import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.SQLException;

import domain.model.Doctor;

public class DoctorRepository extends BaseRepository {
	private String insertSql = "INSERT INTO doctor (name, surname, birthDate, personalIdentityNumber, phoneNumber, email, position, salary) VALUES (?,?,?,?,?,?,?,?)";
	private String selectByIdSql = "SELECT * FROM doctor WHERE id=?";
	private String deleteSql = "DELETE FROM doctor WHERE id=?";
	private String getAllSql = "SELECT * FROM doctor";
	
	PreparedStatement insert;
	PreparedStatement selectById;
	PreparedStatement delete;
	PreparedStatement getAll;
	
	public DoctorRepository(Connection connection) {
		super(connection);
		try {
			insert = connection.prepareStatement(insertSql);
			selectById = connection.prepareStatement(selectByIdSql);
			delete = connection.prepareStatement(deleteSql);
			getAll = connection.prepareStatement(getAllSql);

		} catch (SQLException e) {
			e.printStackTrace();
		}
	}

	public Doctor get(int doctorId){
		try{
			selectById.setInt(1, doctorId);
			ResultSet rs = selectById.executeQuery();
			while(rs.next()){
				Doctor result = new Doctor();
				result.setId(rs.getInt("id"));
				result.setName(rs.getString("name"));
				result.setSurname(rs.getString("surname"));
				result.setBirthDate(rs.getDate("birthDate"));
				result.setPersonalIdentityNumber(rs.getString("personalIdentityNumber"));
				result.setPhoneNumber(rs.getString("phoneNumber"));
				result.setEmail(rs.getString("email"));
				result.setPosition(rs.getString("position"));
				result.setSalary(rs.getInt("salary"));
				
				return result;
			}
		}
		catch(SQLException ex){
			ex.printStackTrace();
		}
		return null;
		
	}
	
	public void add(Doctor doctor) {
		try {
			insert.setString(1, doctor.getName());
			insert.setString(2, doctor.getSurname());
			insert.setDate(3, doctor.getBirthDate());
			insert.setString(4, doctor.getPersonalIdentityNumber());
			insert.setString(5, doctor.getPhoneNumber());
			insert.setString(6, doctor.getEmail());
			insert.setString(7, doctor.getPosition());
			insert.setInt(8, doctor.getSalary());
			insert.executeUpdate();
		} catch (SQLException ex) {
			ex.printStackTrace();
		}
	}

	public void delete(int doctorId)
	{
		try {
			delete.setInt(1, doctorId);
			delete.executeQuery();
		}
		catch(SQLException e)
		{
			e.printStackTrace();
		}
	}
	
	
	@Override
	protected String createTableSql() {
		return "" + "CREATE TABLE doctor("
				+ "id bigint GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,"
				+ "name varchar(20)," + "surname varchar(20)"  
				+ "birthDate DATE," + "personalIdentityNumber varchar(15),"
				+ "phoneNumber varchar(20)," + "email varchar (30),"
				+ "position varchar(20," + "salary int (10)"
				+")";
	}

	@Override
	protected String tableName() {
		return "doctor";
	}

	
	
}
